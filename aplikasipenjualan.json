{
    "source": "mockoon:1.11.0",
    "data": [
        {
            "type": "environment",
            "item": {
                "uuid": "",
                "lastMigration": 13,
                "name": "Demo API",
                "endpointPrefix": "",
                "latency": 0,
                "port": 3000,
                "routes": [
                    {
                        "uuid": "",
                        "documentation": "Generate random body (JSON, text, CSV, etc) with templating",
                        "method": "get",
                        "endpoint": "users",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"Templating example\": \"For more information about templating, click the blue 'i' above this editor\",\n  \"users\": [\n    {{# repeat (queryParam 'total' '10') }}\n      {\n        \"userId\": \"{{ faker 'random.number' min=10000 max=100000 }}\",\n        \"firstname\": \"{{ faker 'name.firstName' }}\",\n        \"lastname\": \"{{ faker 'name.lastName' }}\",\n        \"friends\": [\n          {{# repeat (faker 'random.number' 5) }}\n            {\n              \"id\": \"{{ faker 'random.uuid' }}\"\n            }\n          {{/ repeat }}\n        ]\n      },\n    {{/ repeat }}\n  ],\n  \"total\": \"{{queryParam 'total' '10'}}\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Creates 10 random users, or the amount specified in the 'total' query param",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Use multiple responses with rules",
                        "method": "post",
                        "endpoint": "content/:param1",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"Rules example\": \"Default response. Served if route param 'param1' is not present.\"\n}",
                                "latency": 0,
                                "statusCode": 201,
                                "label": "Default response",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"Rules example\": \"Content XYZ. Served if route param 'param1' equals 'xyz'. (See in 'Rules' tab)\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Content XYZ",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [
                                    {
                                        "target": "params",
                                        "modifier": "param1",
                                        "value": "xyz",
                                        "isRegex": false
                                    }
                                ],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"Rules example\": \"Content not found. Served if route param 'param1' is not equal to 'xyz'. (See in 'Rules' tab)\"\n}\n",
                                "latency": 0,
                                "statusCode": 404,
                                "label": "Content not found",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [
                                    {
                                        "target": "params",
                                        "modifier": "param1",
                                        "value": "^(?!.*xyz).*$",
                                        "isRegex": true
                                    }
                                ],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Serve a file dynamically depending on the path param 'pageName'.",
                        "method": "get",
                        "endpoint": "file/:pageName",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Templating is also supported in file path",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "text/html"
                                    }
                                ],
                                "filePath": "./page{{urlParam 'pageName'}}.html",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Path supports various patterns",
                        "method": "put",
                        "endpoint": "path/with/pattern(s)?/*",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "The current path will match the following routes: \nhttp://localhost:3000/path/with/pattern/\nhttp://localhost:3000/path/with/patterns/\nhttp://localhost:3000/path/with/patterns/anything-else\n\nLearn more about Mockoon's routing: https://mockoon.com/docs/latest/routing",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "text/plain"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Can Mockoon forward or record entering requests?",
                        "method": "get",
                        "endpoint": "forward-and-record",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "Mockoon can also act as a proxy and forward all entering requests that are not caught by declared routes. \nYou can activate this option in the environment settings ('cog' icon in the upper right corner). \nTo learn more: https://mockoon.com/docs/latest/proxy-mode\n\nAs always, all entering requests, and responses from the proxied server will be recorded ('clock' icon in the upper right corner).\nTo learn more: https://mockoon.com/docs/latest/requests-logging",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "text/plain"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    }
                ],
                "proxyMode": false,
                "proxyHost": "",
                "https": false,
                "cors": true,
                "headers": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "proxyReqHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ],
                "proxyResHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ]
            }
        },
        {
            "type": "environment",
            "item": {
                "uuid": "",
                "lastMigration": 13,
                "name": "Aplikasi penjualan",
                "endpointPrefix": "api/v1",
                "latency": 0,
                "port": 3001,
                "routes": [
                    {
                        "uuid": "",
                        "documentation": "",
                        "method": "get",
                        "endpoint": "userAdmin",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\r\n  {{#repeat (queryParam 'total' '10')}}\r\n  {\r\n    \"idKaryawan\": {{@index}},\r\n    \"username\": \"{{faker 'name.firstName'}}\",\r\n    \"email\": \"{{faker 'internet.email'}}\",\r\n    \"password\": \"{{faker 'internet.password'}}\",\r\n  },\r\n  {{/repeat}}\r\n]\r\n  ",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [
                                    {
                                        "target": "body",
                                        "modifier": null,
                                        "value": null,
                                        "isRegex": true
                                    }
                                ],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "",
                        "method": "get",
                        "endpoint": "produkKategori",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\r\n  {{#repeat (queryParam 'total' '5')}}\r\n  {\r\n    \"idKategori\": {{@index}},\r\n    \"nameKategori\": \"{{faker 'commerce.productMaterial'}}\",\r\n  },\r\n  {{/repeat}}\r\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "",
                        "method": "get",
                        "endpoint": "produk",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\r\n  {{#repeat (queryParam 'total' '10')}}\r\n  {\r\n    \"idProduk\": {{@index}},\r\n    \"idSupplier\": {{faker 'random.number' 10}},\r\n    \"idKategori\": {{faker 'random.number' 10}},\r\n    \"namaProduk\": \"{{faker 'commerce.productName'}}\",\r\n    \"deskripsiProduk\": \"{{faker 'commerce.productDescription'}}\",\r\n    \"imageProduk\": \"{{faker 'image.food'}}\",\r\n    \"harga\": \"{{faker 'commerce.price'}}\",\r\n    \"stok\": {{faker 'random.number' 100}},\r\n  },\r\n  {{/repeat}}\r\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "",
                        "method": "get",
                        "endpoint": "penjualan",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\r\n  {{#repeat (queryParam 'total' '10')}}\r\n  {\r\n    \"idPenjuaaln\": {{@index}},\r\n    \"idProduk\": {{faker 'random.number' 10}},\r\n    \"tglPenjualan\": \"{{faker 'date.recent'}}\",\r\n    \"jumlah\": {{faker 'random.number' 100}},\r\n    \"total\": \"{{faker 'commerce.price'}}\",\r\n  },\r\n  {{/repeat}}\r\n] ",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [
                                    {
                                        "target": "query",
                                        "modifier": null,
                                        "value": null,
                                        "isRegex": false
                                    }
                                ],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "",
                        "method": "get",
                        "endpoint": "supplier",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\r\n  {{#repeat (queryParam 'total' '10')}}\r\n  {\r\n    \"idSupplier\": {{@index}},\r\n    \"namaSupplier\": \"{{faker 'company.companyName'}}\",\r\n  },\r\n  {{/repeat}}\r\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    }
                ],
                "proxyMode": false,
                "proxyHost": "",
                "https": false,
                "cors": true,
                "headers": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "proxyReqHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ],
                "proxyResHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ]
            }
        },
        {
            "type": "environment",
            "item": {
                "uuid": "",
                "lastMigration": 13,
                "name": "Demo API",
                "endpointPrefix": "",
                "latency": 0,
                "port": 30001,
                "routes": [
                    {
                        "uuid": "",
                        "documentation": "Generate random body (JSON, text, CSV, etc) with templating",
                        "method": "get",
                        "endpoint": "users",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"Templating example\": \"For more information about templating, click the blue 'i' above this editor\",\n  \"users\": [\n    {{# repeat (queryParam 'total' '10') }}\n      {\n        \"userId\": \"{{ faker 'random.number' min=10000 max=100000 }}\",\n        \"firstname\": \"{{ faker 'name.firstName' }}\",\n        \"lastname\": \"{{ faker 'name.lastName' }}\",\n        \"friends\": [\n          {{# repeat (faker 'random.number' 5) }}\n            {\n              \"id\": \"{{ faker 'random.uuid' }}\"\n            }\n          {{/ repeat }}\n        ]\n      },\n    {{/ repeat }}\n  ],\n  \"total\": \"{{queryParam 'total' '10'}}\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Creates 10 random users, or the amount specified in the 'total' query param",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Use multiple responses with rules",
                        "method": "post",
                        "endpoint": "content/:param1",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"Rules example\": \"Default response. Served if route param 'param1' is not present.\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Default response",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"Rules example\": \"Content XYZ. Served if route param 'param1' equals 'xyz'. (See in 'Rules' tab)\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Content XYZ",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [
                                    {
                                        "target": "params",
                                        "modifier": "param1",
                                        "value": "xyz",
                                        "isRegex": false
                                    }
                                ],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"Rules example\": \"Content not found. Served if route param 'param1' is not equal to 'xyz'. (See in 'Rules' tab)\"\n}\n",
                                "latency": 0,
                                "statusCode": 404,
                                "label": "Content not found",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [
                                    {
                                        "target": "params",
                                        "modifier": "param1",
                                        "value": "^(?!.*xyz).*$",
                                        "isRegex": true
                                    }
                                ],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Serve a file dynamically depending on the path param 'pageName'.",
                        "method": "get",
                        "endpoint": "file/:pageName",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Templating is also supported in file path",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "text/html"
                                    }
                                ],
                                "filePath": "./page{{urlParam 'pageName'}}.html",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Path supports various patterns",
                        "method": "put",
                        "endpoint": "path/with/pattern(s)?/*",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "The current path will match the following routes: \nhttp://localhost:3000/path/with/pattern/\nhttp://localhost:3000/path/with/patterns/\nhttp://localhost:3000/path/with/patterns/anything-else\n\nLearn more about Mockoon's routing: https://mockoon.com/docs/latest/routing",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "text/plain"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Can Mockoon forward or record entering requests?",
                        "method": "get",
                        "endpoint": "forward-and-record",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "Mockoon can also act as a proxy and forward all entering requests that are not caught by declared routes. \nYou can activate this option in the environment settings ('cog' icon in the upper right corner). \nTo learn more: https://mockoon.com/docs/latest/proxy-mode\n\nAs always, all entering requests, and responses from the proxied server will be recorded ('clock' icon in the upper right corner).\nTo learn more: https://mockoon.com/docs/latest/requests-logging",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "text/plain"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false
                    }
                ],
                "proxyMode": false,
                "proxyHost": "",
                "https": false,
                "cors": true,
                "headers": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "proxyReqHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ],
                "proxyResHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ]
            }
        }
    ]
}